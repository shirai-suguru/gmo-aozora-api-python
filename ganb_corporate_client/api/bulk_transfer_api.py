# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/api-cooperation/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.15.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ganb_corporate_client.api_client import ApiClient


class BulkTransferApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_transfer_cancel_using_post(self, body, x_access_token, **kwargs):  # noqa: E501
        """総合振込取消依頼  # noqa: E501

        <p>総合振込の取消を行うための依頼をします</p> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>取消対象ステータス</p>   <p style='padding-left:20px;'>申請中以降のステータスで取消が可能です</p>   <p style='padding-left:20px;'>依頼中、作成中の状態は取消対象外です</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>取消対象キー区分</p>   <p style='padding-left:20px;'>取消対象の取引の内容について指定して下さい</p>   <p style='padding-left:20px;'>取消対象キー区分と、取消対象の振込申請番号の状態がマッチしない場合は、「400 Bad Request」を返却します</p>   <p style='padding-left:20px;'>総合振込の対象は3または4のみとなります</p>   <p style='padding-left:20px;'>1、2は指定不可となります</p>   <p style='padding-left:20px;'>・ビジネスID管理未利用の場合は、4を指定してください。その他は指定不可となります</p>   <p style='padding-left:20px;'>・ビジネスID管理利用中かつ、申請者による申請中ステータスの「取下」を行いたい場合は、3を指定してください</p>   <p style='padding-left:20px;'>・ビジネスID管理利用中かつ、承認可能者による予約中ステータスの「承認取消」を行いたい場合は、4を指定してください</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>重複した依頼</p>   <p style='padding-left:20px;'>同一の受付番号（振込申請番号）への重複した依頼はできません</p>   <p style='padding-left:20px;'>なお、前回の総合振込取消依頼が期限切れとなれば依頼は可能となります</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_cancel_using_post(body, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransferCancelRequest body: HTTPリクエストボディ (required)
        :param str x_access_token: アクセストークン (required)
        :return: TransferCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_transfer_cancel_using_post_with_http_info(body, x_access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_transfer_cancel_using_post_with_http_info(body, x_access_token, **kwargs)  # noqa: E501
            return data

    def bulk_transfer_cancel_using_post_with_http_info(self, body, x_access_token, **kwargs):  # noqa: E501
        """総合振込取消依頼  # noqa: E501

        <p>総合振込の取消を行うための依頼をします</p> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>取消対象ステータス</p>   <p style='padding-left:20px;'>申請中以降のステータスで取消が可能です</p>   <p style='padding-left:20px;'>依頼中、作成中の状態は取消対象外です</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>取消対象キー区分</p>   <p style='padding-left:20px;'>取消対象の取引の内容について指定して下さい</p>   <p style='padding-left:20px;'>取消対象キー区分と、取消対象の振込申請番号の状態がマッチしない場合は、「400 Bad Request」を返却します</p>   <p style='padding-left:20px;'>総合振込の対象は3または4のみとなります</p>   <p style='padding-left:20px;'>1、2は指定不可となります</p>   <p style='padding-left:20px;'>・ビジネスID管理未利用の場合は、4を指定してください。その他は指定不可となります</p>   <p style='padding-left:20px;'>・ビジネスID管理利用中かつ、申請者による申請中ステータスの「取下」を行いたい場合は、3を指定してください</p>   <p style='padding-left:20px;'>・ビジネスID管理利用中かつ、承認可能者による予約中ステータスの「承認取消」を行いたい場合は、4を指定してください</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>重複した依頼</p>   <p style='padding-left:20px;'>同一の受付番号（振込申請番号）への重複した依頼はできません</p>   <p style='padding-left:20px;'>なお、前回の総合振込取消依頼が期限切れとなれば依頼は可能となります</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_cancel_using_post_with_http_info(body, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TransferCancelRequest body: HTTPリクエストボディ (required)
        :param str x_access_token: アクセストークン (required)
        :return: TransferCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_transfer_cancel_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_transfer_cancel_using_post`")  # noqa: E501
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `bulk_transfer_cancel_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulktransfer/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferCancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_transfer_fee_using_post(self, body, x_access_token, **kwargs):  # noqa: E501
        """総合振込手数料事前照会  # noqa: E501

        <p>総合振込・総合振込予約を行うための依頼内容の事前チェックと手数料を照会します</p> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='padding-left:20px;'>合計振込手数料および個別振込手数料は、振込実行時までに手数料の改定や消費税の変更等が行われた場合は、当APIで返却した手数料とは異なる手数料が適用されることがあります</p>   <p style='padding-left:20px;'>ポイントについては、算出から振込実行までの間に変動する可能性があるため、手数料算出時の計算対象から除外して返却されます</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_fee_using_post(body, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkTransferRequest body: HTTPリクエストボディ (required)
        :param str x_access_token: アクセストークン (required)
        :return: TransferFeeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_transfer_fee_using_post_with_http_info(body, x_access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_transfer_fee_using_post_with_http_info(body, x_access_token, **kwargs)  # noqa: E501
            return data

    def bulk_transfer_fee_using_post_with_http_info(self, body, x_access_token, **kwargs):  # noqa: E501
        """総合振込手数料事前照会  # noqa: E501

        <p>総合振込・総合振込予約を行うための依頼内容の事前チェックと手数料を照会します</p> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='padding-left:20px;'>合計振込手数料および個別振込手数料は、振込実行時までに手数料の改定や消費税の変更等が行われた場合は、当APIで返却した手数料とは異なる手数料が適用されることがあります</p>   <p style='padding-left:20px;'>ポイントについては、算出から振込実行までの間に変動する可能性があるため、手数料算出時の計算対象から除外して返却されます</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_fee_using_post_with_http_info(body, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkTransferRequest body: HTTPリクエストボディ (required)
        :param str x_access_token: アクセストークン (required)
        :return: TransferFeeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_transfer_fee_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_transfer_fee_using_post`")  # noqa: E501
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `bulk_transfer_fee_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulktransfer/transferfee', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferFeeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_transfer_request_result_using_get(self, account_id, apply_no, x_access_token, **kwargs):  # noqa: E501
        """総合振込依頼結果照会  # noqa: E501

        <p>総合振込依頼、総合振込取消依頼の処理状態を照会します</P> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='padding-left:20px;'>総合振込取消依頼をした場合は、最後の依頼の結果コードが照会対象となります</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_request_result_using_get(account_id, apply_no, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 口座ID<br>半角数字<br>口座を識別するID (required)
        :param str apply_no: 受付番号（振込申請番号）<br>半角数字<br>すべての振込・総合振込で採番される、照会の基本単位となる番号 (required)
        :param str x_access_token: アクセストークン (required)
        :return: TransferRequestResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_transfer_request_result_using_get_with_http_info(account_id, apply_no, x_access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_transfer_request_result_using_get_with_http_info(account_id, apply_no, x_access_token, **kwargs)  # noqa: E501
            return data

    def bulk_transfer_request_result_using_get_with_http_info(self, account_id, apply_no, x_access_token, **kwargs):  # noqa: E501
        """総合振込依頼結果照会  # noqa: E501

        <p>総合振込依頼、総合振込取消依頼の処理状態を照会します</P> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='padding-left:20px;'>総合振込取消依頼をした場合は、最後の依頼の結果コードが照会対象となります</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_request_result_using_get_with_http_info(account_id, apply_no, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 口座ID<br>半角数字<br>口座を識別するID (required)
        :param str apply_no: 受付番号（振込申請番号）<br>半角数字<br>すべての振込・総合振込で採番される、照会の基本単位となる番号 (required)
        :param str x_access_token: アクセストークン (required)
        :return: TransferRequestResultResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'apply_no', 'x_access_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_transfer_request_result_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `bulk_transfer_request_result_using_get`")  # noqa: E501
        # verify the required parameter 'apply_no' is set
        if ('apply_no' not in params or
                params['apply_no'] is None):
            raise ValueError("Missing the required parameter `apply_no` when calling `bulk_transfer_request_result_using_get`")  # noqa: E501
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `bulk_transfer_request_result_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'apply_no' in params:
            query_params.append(('applyNo', params['apply_no']))  # noqa: E501

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulktransfer/request-result', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TransferRequestResultResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_transfer_request_using_post(self, body, x_access_token, **kwargs):  # noqa: E501
        """総合振込依頼  # noqa: E501

        <p>総合振込・総合振込予約を行うための依頼をします</p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_request_using_post(body, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkTransferRequest body: HTTPリクエストボディ (required)
        :param str x_access_token: アクセストークン (required)
        :param str idempotency_key: 冪等キー
        :return: BulkTransferRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_transfer_request_using_post_with_http_info(body, x_access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_transfer_request_using_post_with_http_info(body, x_access_token, **kwargs)  # noqa: E501
            return data

    def bulk_transfer_request_using_post_with_http_info(self, body, x_access_token, **kwargs):  # noqa: E501
        """総合振込依頼  # noqa: E501

        <p>総合振込・総合振込予約を行うための依頼をします</p>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_request_using_post_with_http_info(body, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BulkTransferRequest body: HTTPリクエストボディ (required)
        :param str x_access_token: アクセストークン (required)
        :param str idempotency_key: 冪等キー
        :return: BulkTransferRequestResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_access_token', 'idempotency_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_transfer_request_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `bulk_transfer_request_using_post`")  # noqa: E501
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `bulk_transfer_request_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501
        if 'idempotency_key' in params:
            header_params['Idempotency-Key'] = params['idempotency_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulktransfer/request', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkTransferRequestResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_transfer_status_using_get(self, account_id, query_key_class, x_access_token, **kwargs):  # noqa: E501
        """総合振込状況照会  # noqa: E501

        <p>仕向の総合振込状況および履歴を照会します</p> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>取得上限件数</p>   <p style='padding-left:20px;'>総合振込照会明細情報 500件（明細情報取得フラグが「False:取得しない」の場合）</p>   <p style='padding-left:20px;'>総合振込明細情報 500件（明細情報取得フラグが「True：取得する」の場合）</p>   <p style='padding-left:20px;'>1回のリクエストで照会できる明細は、総合振込照会明細情報または総合振込明細情報のいずれか最大500件です</p>   <p style='padding-left:20px;'>取得できる明細が存在しない場合は「200：OK」とし明細を返却しません</p>   <p style='padding-left:20px;'>取得できる明細数が500に満たないときは取得できる明細のみを返却します</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>ページング</p>   <p style='padding-left:20px;'>2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーまたは総合振込明細情報取得対象キーを追加してリクエストしてください</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>ソート順</p>   <p style='padding-left:20px;'>明細情報取得フラグが、「False：取得しない」のとき</p>   <p style='padding-left:20px;'>　振込照会対象期間区分の指定により下記となります</p>   <p style='padding-left:50px;'>1：振込申請受付日　第1ソート：振込申請日昇順　第２ソート：振込申請番号昇順</p>   <p style='padding-left:50px;'>2：振込指定日　　　第1ソート：振込指定日昇順　第２ソート：振込申請番号昇順</p>   <p style='padding-left:50px;'>※振込照会対象期間区分の指定がない場合は、1：振込申請受付日と同じとします</p>   <p style='padding-left:20px;'>明細情報取得フラグが、「True：取得する」のとき</p>   <p style='padding-left:20px;'>　明細番号の昇順</p> </div> <div style='width:600px; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>対象期間</p>   <div style='display:table; margin-left:20px; background-color:#29659b;'>     <div style='display:table-cell; width:160px; padding:9px; border:1px solid #fff; color:#fff;'>日本語名</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9312;</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9313;</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9314;</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9315;</div>   </div>   <div style='display:table; margin-left:20px;'>     <div style='display:table-cell; width:160px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>対象期間From</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>   </div>   <div style='display:table; margin-left:20px;'>     <div style='display:table-cell; width:160px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>対象期間To</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>   </div> </div> <div style='margin:10px;'>   <ul>     <li style='list-style-type:none;'>&#9312;の場合　当日分の明細を返却</li>     <li style='list-style-type:none;'>&#9313;の場合　対象期間From　～　当日までの明細を返却</li>     <li style='list-style-type:none;'>&#9314;の場合　取引初回　～　対象期間Toまでの明細を返却</li>     <li style='list-style-type:none;'>&#9315;の場合　対象期間From　～　対象期間Toまでの明細を返却</li>  <li style='list-style-type:none; margin-left:10px;'>※現在契約中の総合振込サービスのみ照会可能となります</li>  </ul> </div> <div style='margin-bottom:40px;' /> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>照会対象ステータス</p>   <p style='padding-left:20px;'>申請中以降のステータスで照会が可能となります</p>   <p style='padding-left:20px;'>依頼中、作成中の状態は照会対象外です</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>照会対象となる明細</p>   <p style='padding-left:20px;'>総合振込・およびその予約の履歴と状況が照会対象となります（APIからの依頼結果のみではありません）</p>   <p style='padding-left:20px;'>ビジネスIDをご利用のお客様で総合振込申請者が実施した総合振込申請の取下は、申請者およびマスター権限を有したユーザーのみが照会可能となります</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_status_using_get(account_id, query_key_class, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 口座ID<br>半角数字<br>口座を識別するID (required)
        :param str query_key_class: 照会対象キー区分<br>半角数字<br>照会対象のキー<br>1：振込申請照会対象指定、2：振込一括照会対象指定 (required)
        :param str x_access_token: アクセストークン (required)
        :param bool detail_info_necessity: 明細情報取得フラグ<br>総合振込明細情報の取得要否<br>照会対象キー区分が、1のときは「True：取得する」を指定可<br>それ以外で「True：取得する」が設定されている場合は、「400 Bad Request」を返却<br>True：取得する、False:取得しない　省略/NULLは　false扱い<br>
        :param str bulktransfer_item_key: 総合振込明細情報取得対象キー<br>半角数字<br>明細情報取得フラグが、「True：取得する」のとき指定可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>総合振込明細情報を取得するときに取得を開始する番号<br>明細情報取得フラグが、「True：取得する」のときの省略/NULLは1扱い<br>1500明細を取得する場合、は以下のように設定<br>1電文目：1<br>2電文目：501<br>3電文目：1001
        :param str apply_no: 受付番号（振込申請番号）<br>半角数字<br>照会対象の番号を設定<br>照会対象キー区分が、1のときは必須<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
        :param str date_from: 対象期間From<br>半角文字<br>YYYY-MM-DD形式<br>照会対象キー区分が、2のときは入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
        :param str date_to: 対象期間To<br>半角文字<br>YYYY-MM-DD形式<br>照会対象キー区分が、2のときは入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>対象期間Fromと対象期間Toを指定する場合は、対象期間From≦対象期間Toとし、それ以外は「400 Bad Request」を返却
        :param str next_item_key: 次明細キー<br>半角数字<br>照会対象キー区分が、2のときは入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
        :param list[str] request_transfer_status: 照会対象ステータス<br> 半角数字<br> 2:申請中、3:差戻、4:取下げ、5:期限切れ、8:承認取消/予約取消、<br> 11:予約中、12:手続中、13:リトライ中、<br> 20:手続済、30:不能・組戻あり、40:手続不成立<br><br> 照会対象キー区分が、2のときは設定可<br> それ以外は設定しません（値が設定されている場合は、「400 Bad Request」を返却）<br> 配列のため、複数設定した場合は対象のステータスをOR条件で検索します<br> 省略した場合は全てを設定したものとみなします
        :param str request_transfer_class: 振込照会対象取得区分<br>半角数字<br>1：ALL、2：振込申請のみ、3：振込受付情報のみ<br>照会対象キー区分が2かつ、ビジネスID管理利用中の場合のときのみ入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>照会対象キー区分が、2のときに指定しない場合は1と扱います
        :param str request_transfer_term: 振込照会対象期間区分<br>半角数字<br>対象期間Fromと対象期間Toで指定する日付の区分<br>1：振込申請受付日　2：振込指定日<br>照会対象キー区分が2のときのみ入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>照会対象キー区分が、2のときに指定しない場合は1と扱います
        :return: BulkTransferStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_transfer_status_using_get_with_http_info(account_id, query_key_class, x_access_token, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_transfer_status_using_get_with_http_info(account_id, query_key_class, x_access_token, **kwargs)  # noqa: E501
            return data

    def bulk_transfer_status_using_get_with_http_info(self, account_id, query_key_class, x_access_token, **kwargs):  # noqa: E501
        """総合振込状況照会  # noqa: E501

        <p>仕向の総合振込状況および履歴を照会します</p> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>詳細説明</h4> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>取得上限件数</p>   <p style='padding-left:20px;'>総合振込照会明細情報 500件（明細情報取得フラグが「False:取得しない」の場合）</p>   <p style='padding-left:20px;'>総合振込明細情報 500件（明細情報取得フラグが「True：取得する」の場合）</p>   <p style='padding-left:20px;'>1回のリクエストで照会できる明細は、総合振込照会明細情報または総合振込明細情報のいずれか最大500件です</p>   <p style='padding-left:20px;'>取得できる明細が存在しない場合は「200：OK」とし明細を返却しません</p>   <p style='padding-left:20px;'>取得できる明細数が500に満たないときは取得できる明細のみを返却します</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>ページング</p>   <p style='padding-left:20px;'>2ページ目以降を照会する際は、初回と同じリクエスト内容に、初回レスポンスの次明細キーまたは総合振込明細情報取得対象キーを追加してリクエストしてください</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>ソート順</p>   <p style='padding-left:20px;'>明細情報取得フラグが、「False：取得しない」のとき</p>   <p style='padding-left:20px;'>　振込照会対象期間区分の指定により下記となります</p>   <p style='padding-left:50px;'>1：振込申請受付日　第1ソート：振込申請日昇順　第２ソート：振込申請番号昇順</p>   <p style='padding-left:50px;'>2：振込指定日　　　第1ソート：振込指定日昇順　第２ソート：振込申請番号昇順</p>   <p style='padding-left:50px;'>※振込照会対象期間区分の指定がない場合は、1：振込申請受付日と同じとします</p>   <p style='padding-left:20px;'>明細情報取得フラグが、「True：取得する」のとき</p>   <p style='padding-left:20px;'>　明細番号の昇順</p> </div> <div style='width:600px; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>対象期間</p>   <div style='display:table; margin-left:20px; background-color:#29659b;'>     <div style='display:table-cell; width:160px; padding:9px; border:1px solid #fff; color:#fff;'>日本語名</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9312;</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9313;</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9314;</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; text-align:center; font-size:120%; color:#fff;'>&#9315;</div>   </div>   <div style='display:table; margin-left:20px;'>     <div style='display:table-cell; width:160px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>対象期間From</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>   </div>   <div style='display:table; margin-left:20px;'>     <div style='display:table-cell; width:160px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>対象期間To</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>×</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>     <div style='display:table-cell; width:80px; padding:9px; border:1px solid #fff; background-color:#f8f8f8; font-size:120%; text-align:center;'>○</div>   </div> </div> <div style='margin:10px;'>   <ul>     <li style='list-style-type:none;'>&#9312;の場合　当日分の明細を返却</li>     <li style='list-style-type:none;'>&#9313;の場合　対象期間From　～　当日までの明細を返却</li>     <li style='list-style-type:none;'>&#9314;の場合　取引初回　～　対象期間Toまでの明細を返却</li>     <li style='list-style-type:none;'>&#9315;の場合　対象期間From　～　対象期間Toまでの明細を返却</li>  <li style='list-style-type:none; margin-left:10px;'>※現在契約中の総合振込サービスのみ照会可能となります</li>  </ul> </div> <div style='margin-bottom:40px;' /> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>照会対象ステータス</p>   <p style='padding-left:20px;'>申請中以降のステータスで照会が可能となります</p>   <p style='padding-left:20px;'>依頼中、作成中の状態は照会対象外です</p> </div> <div style='margin:10px;'>   <p style='font-weight:bold; color:#616161;'>照会対象となる明細</p>   <p style='padding-left:20px;'>総合振込・およびその予約の履歴と状況が照会対象となります（APIからの依頼結果のみではありません）</p>   <p style='padding-left:20px;'>ビジネスIDをご利用のお客様で総合振込申請者が実施した総合振込申請の取下は、申請者およびマスター権限を有したユーザーのみが照会可能となります</p> </div>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_transfer_status_using_get_with_http_info(account_id, query_key_class, x_access_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: 口座ID<br>半角数字<br>口座を識別するID (required)
        :param str query_key_class: 照会対象キー区分<br>半角数字<br>照会対象のキー<br>1：振込申請照会対象指定、2：振込一括照会対象指定 (required)
        :param str x_access_token: アクセストークン (required)
        :param bool detail_info_necessity: 明細情報取得フラグ<br>総合振込明細情報の取得要否<br>照会対象キー区分が、1のときは「True：取得する」を指定可<br>それ以外で「True：取得する」が設定されている場合は、「400 Bad Request」を返却<br>True：取得する、False:取得しない　省略/NULLは　false扱い<br>
        :param str bulktransfer_item_key: 総合振込明細情報取得対象キー<br>半角数字<br>明細情報取得フラグが、「True：取得する」のとき指定可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>総合振込明細情報を取得するときに取得を開始する番号<br>明細情報取得フラグが、「True：取得する」のときの省略/NULLは1扱い<br>1500明細を取得する場合、は以下のように設定<br>1電文目：1<br>2電文目：501<br>3電文目：1001
        :param str apply_no: 受付番号（振込申請番号）<br>半角数字<br>照会対象の番号を設定<br>照会対象キー区分が、1のときは必須<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
        :param str date_from: 対象期間From<br>半角文字<br>YYYY-MM-DD形式<br>照会対象キー区分が、2のときは入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
        :param str date_to: 対象期間To<br>半角文字<br>YYYY-MM-DD形式<br>照会対象キー区分が、2のときは入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>対象期間Fromと対象期間Toを指定する場合は、対象期間From≦対象期間Toとし、それ以外は「400 Bad Request」を返却
        :param str next_item_key: 次明細キー<br>半角数字<br>照会対象キー区分が、2のときは入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
        :param list[str] request_transfer_status: 照会対象ステータス<br> 半角数字<br> 2:申請中、3:差戻、4:取下げ、5:期限切れ、8:承認取消/予約取消、<br> 11:予約中、12:手続中、13:リトライ中、<br> 20:手続済、30:不能・組戻あり、40:手続不成立<br><br> 照会対象キー区分が、2のときは設定可<br> それ以外は設定しません（値が設定されている場合は、「400 Bad Request」を返却）<br> 配列のため、複数設定した場合は対象のステータスをOR条件で検索します<br> 省略した場合は全てを設定したものとみなします
        :param str request_transfer_class: 振込照会対象取得区分<br>半角数字<br>1：ALL、2：振込申請のみ、3：振込受付情報のみ<br>照会対象キー区分が2かつ、ビジネスID管理利用中の場合のときのみ入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>照会対象キー区分が、2のときに指定しない場合は1と扱います
        :param str request_transfer_term: 振込照会対象期間区分<br>半角数字<br>対象期間Fromと対象期間Toで指定する日付の区分<br>1：振込申請受付日　2：振込指定日<br>照会対象キー区分が2のときのみ入力可<br>それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）<br>照会対象キー区分が、2のときに指定しない場合は1と扱います
        :return: BulkTransferStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'query_key_class', 'x_access_token', 'detail_info_necessity', 'bulktransfer_item_key', 'apply_no', 'date_from', 'date_to', 'next_item_key', 'request_transfer_status', 'request_transfer_class', 'request_transfer_term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_transfer_status_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `bulk_transfer_status_using_get`")  # noqa: E501
        # verify the required parameter 'query_key_class' is set
        if ('query_key_class' not in params or
                params['query_key_class'] is None):
            raise ValueError("Missing the required parameter `query_key_class` when calling `bulk_transfer_status_using_get`")  # noqa: E501
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `bulk_transfer_status_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'query_key_class' in params:
            query_params.append(('queryKeyClass', params['query_key_class']))  # noqa: E501
        if 'detail_info_necessity' in params:
            query_params.append(('detailInfoNecessity', params['detail_info_necessity']))  # noqa: E501
        if 'bulktransfer_item_key' in params:
            query_params.append(('bulktransferItemKey', params['bulktransfer_item_key']))  # noqa: E501
        if 'apply_no' in params:
            query_params.append(('applyNo', params['apply_no']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'next_item_key' in params:
            query_params.append(('nextItemKey', params['next_item_key']))  # noqa: E501
        if 'request_transfer_status' in params:
            query_params.append(('requestTransferStatus', params['request_transfer_status']))  # noqa: E501
            collection_formats['requestTransferStatus'] = 'multi'  # noqa: E501
        if 'request_transfer_class' in params:
            query_params.append(('requestTransferClass', params['request_transfer_class']))  # noqa: E501
        if 'request_transfer_term' in params:
            query_params.append(('requestTransferTerm', params['request_transfer_term']))  # noqa: E501

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/bulktransfer/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BulkTransferStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
