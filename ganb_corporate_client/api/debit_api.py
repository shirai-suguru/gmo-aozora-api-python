# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/api-cooperation/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.15.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ganb_corporate_client.api_client import ApiClient


class DebitApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def debit_using_get(self, x_access_token, account_id, **kwargs):  # noqa: E501
        """デビット情報照会  # noqa: E501

        デビット情報照会を実施します。  <div style='margin:10px;'>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.debit_using_get(x_access_token, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_access_token: アクセストークン (required)
        :param str account_id: 半角英数字<br>口座を識別するID (required)
        :param str debit_id: 半角数字<br>デビットカードを識別するID
        :param list[str] request_debit_status: 半角数字<br>01:利用中、02:有効期限切れ、09:解約<br>配列のため、複数設定した場合は対象のステータスをOR条件で検索します<br>省略した場合は全てを設定したものとみなします
        :return: DebitInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.debit_using_get_with_http_info(x_access_token, account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.debit_using_get_with_http_info(x_access_token, account_id, **kwargs)  # noqa: E501
            return data

    def debit_using_get_with_http_info(self, x_access_token, account_id, **kwargs):  # noqa: E501
        """デビット情報照会  # noqa: E501

        デビット情報照会を実施します。  <div style='margin:10px;'>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.debit_using_get_with_http_info(x_access_token, account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_access_token: アクセストークン (required)
        :param str account_id: 半角英数字<br>口座を識別するID (required)
        :param str debit_id: 半角数字<br>デビットカードを識別するID
        :param list[str] request_debit_status: 半角数字<br>01:利用中、02:有効期限切れ、09:解約<br>配列のため、複数設定した場合は対象のステータスをOR条件で検索します<br>省略した場合は全てを設定したものとみなします
        :return: DebitInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_access_token', 'account_id', 'debit_id', 'request_debit_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method debit_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `debit_using_get`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `debit_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'debit_id' in params:
            query_params.append(('debitId', params['debit_id']))  # noqa: E501
        if 'request_debit_status' in params:
            query_params.append(('requestDebitStatus', params['request_debit_status']))  # noqa: E501
            collection_formats['requestDebitStatus'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/debit/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebitInfoResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def debit_transactions_using_get(self, x_access_token, account_id, debit_id, **kwargs):  # noqa: E501
        """デビット取引明細照会  # noqa: E501

        デビット取引明細照会を実施します。  <div style='margin:10px;'>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.debit_transactions_using_get(x_access_token, account_id, debit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_access_token: アクセストークン (required)
        :param str account_id: 半角英数字<br>口座を識別するID (required)
        :param str debit_id: 半角数字<br>デビットカードを識別するID (required)
        :param str date_from: 半角文字<br>YYYY-MM-DD形式
        :param str date_to: 半角文字<br>YYYY-MM-DD形式<br>対象期間Fromと対象期間Toを指定する場合は、対象期間From≦対象期間Toとし、それ以外は「400 Bad Request」を返却
        :param str next_item_key: 半角数字<br>初回応答で次明細キーが「true」の場合、返却された同項目を2回目以降に設定
        :return: DebitTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.debit_transactions_using_get_with_http_info(x_access_token, account_id, debit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.debit_transactions_using_get_with_http_info(x_access_token, account_id, debit_id, **kwargs)  # noqa: E501
            return data

    def debit_transactions_using_get_with_http_info(self, x_access_token, account_id, debit_id, **kwargs):  # noqa: E501
        """デビット取引明細照会  # noqa: E501

        デビット取引明細照会を実施します。  <div style='margin:10px;'>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.debit_transactions_using_get_with_http_info(x_access_token, account_id, debit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_access_token: アクセストークン (required)
        :param str account_id: 半角英数字<br>口座を識別するID (required)
        :param str debit_id: 半角数字<br>デビットカードを識別するID (required)
        :param str date_from: 半角文字<br>YYYY-MM-DD形式
        :param str date_to: 半角文字<br>YYYY-MM-DD形式<br>対象期間Fromと対象期間Toを指定する場合は、対象期間From≦対象期間Toとし、それ以外は「400 Bad Request」を返却
        :param str next_item_key: 半角数字<br>初回応答で次明細キーが「true」の場合、返却された同項目を2回目以降に設定
        :return: DebitTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_access_token', 'account_id', 'debit_id', 'date_from', 'date_to', 'next_item_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method debit_transactions_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_access_token' is set
        if ('x_access_token' not in params or
                params['x_access_token'] is None):
            raise ValueError("Missing the required parameter `x_access_token` when calling `debit_transactions_using_get`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if ('account_id' not in params or
                params['account_id'] is None):
            raise ValueError("Missing the required parameter `account_id` when calling `debit_transactions_using_get`")  # noqa: E501
        # verify the required parameter 'debit_id' is set
        if ('debit_id' not in params or
                params['debit_id'] is None):
            raise ValueError("Missing the required parameter `debit_id` when calling `debit_transactions_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account_id' in params:
            query_params.append(('accountId', params['account_id']))  # noqa: E501
        if 'debit_id' in params:
            query_params.append(('debitId', params['debit_id']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'next_item_key' in params:
            query_params.append(('nextItemKey', params['next_item_key']))  # noqa: E501

        header_params = {}
        if 'x_access_token' in params:
            header_params['x-access-token'] = params['x_access_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json;charset=UTF-8'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/debit/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DebitTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
