# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/api-cooperation/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.15.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransferQueryBulkResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_from': 'str',
        'date_to': 'str',
        'request_next_item_key': 'str',
        'request_transfer_statuses': 'list[RequestTransferStatus]',
        'request_transfer_class': 'str',
        'request_transfer_term': 'str',
        'has_next': 'bool',
        'next_item_key': 'str'
    }

    attribute_map = {
        'date_from': 'dateFrom',
        'date_to': 'dateTo',
        'request_next_item_key': 'requestNextItemKey',
        'request_transfer_statuses': 'requestTransferStatuses',
        'request_transfer_class': 'requestTransferClass',
        'request_transfer_term': 'requestTransferTerm',
        'has_next': 'hasNext',
        'next_item_key': 'nextItemKey'
    }

    def __init__(self, date_from=None, date_to=None, request_next_item_key=None, request_transfer_statuses=None, request_transfer_class=None, request_transfer_term=None, has_next=None, next_item_key=None):  # noqa: E501
        """TransferQueryBulkResponse - a model defined in Swagger"""  # noqa: E501
        self._date_from = None
        self._date_to = None
        self._request_next_item_key = None
        self._request_transfer_statuses = None
        self._request_transfer_class = None
        self._request_transfer_term = None
        self._has_next = None
        self._next_item_key = None
        self.discriminator = None
        if date_from is not None:
            self.date_from = date_from
        if date_to is not None:
            self.date_to = date_to
        if request_next_item_key is not None:
            self.request_next_item_key = request_next_item_key
        if request_transfer_statuses is not None:
            self.request_transfer_statuses = request_transfer_statuses
        if request_transfer_class is not None:
            self.request_transfer_class = request_transfer_class
        if request_transfer_term is not None:
            self.request_transfer_term = request_transfer_term
        if has_next is not None:
            self.has_next = has_next
        if next_item_key is not None:
            self.next_item_key = next_item_key

    @property
    def date_from(self):
        """Gets the date_from of this TransferQueryBulkResponse.  # noqa: E501

        対象期間From<br>半角文字<br>リクエストしたときと同じ内容<br>対象期間（From）をYYYY-MM-DD形式で設定<br>  # noqa: E501

        :return: The date_from of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this TransferQueryBulkResponse.

        対象期間From<br>半角文字<br>リクエストしたときと同じ内容<br>対象期間（From）をYYYY-MM-DD形式で設定<br>  # noqa: E501

        :param date_from: The date_from of this TransferQueryBulkResponse.  # noqa: E501
        :type: str
        """

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this TransferQueryBulkResponse.  # noqa: E501

        対象期間To<br>半角文字<br>リクエストしたときと同じ内容<br>対象期間（To）をYYYY-MM-DD形式で設定<br>  # noqa: E501

        :return: The date_to of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this TransferQueryBulkResponse.

        対象期間To<br>半角文字<br>リクエストしたときと同じ内容<br>対象期間（To）をYYYY-MM-DD形式で設定<br>  # noqa: E501

        :param date_to: The date_to of this TransferQueryBulkResponse.  # noqa: E501
        :type: str
        """

        self._date_to = date_to

    @property
    def request_next_item_key(self):
        """Gets the request_next_item_key of this TransferQueryBulkResponse.  # noqa: E501

        リクエスト時次明細キー<br>半角数字<br>リクエストしたときと同じ内容<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :return: The request_next_item_key of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_next_item_key

    @request_next_item_key.setter
    def request_next_item_key(self, request_next_item_key):
        """Sets the request_next_item_key of this TransferQueryBulkResponse.

        リクエスト時次明細キー<br>半角数字<br>リクエストしたときと同じ内容<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :param request_next_item_key: The request_next_item_key of this TransferQueryBulkResponse.  # noqa: E501
        :type: str
        """

        self._request_next_item_key = request_next_item_key

    @property
    def request_transfer_statuses(self):
        """Gets the request_transfer_statuses of this TransferQueryBulkResponse.  # noqa: E501

        振込一括照会対象ステータス<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :return: The request_transfer_statuses of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: list[RequestTransferStatus]
        """
        return self._request_transfer_statuses

    @request_transfer_statuses.setter
    def request_transfer_statuses(self, request_transfer_statuses):
        """Sets the request_transfer_statuses of this TransferQueryBulkResponse.

        振込一括照会対象ステータス<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :param request_transfer_statuses: The request_transfer_statuses of this TransferQueryBulkResponse.  # noqa: E501
        :type: list[RequestTransferStatus]
        """

        self._request_transfer_statuses = request_transfer_statuses

    @property
    def request_transfer_class(self):
        """Gets the request_transfer_class of this TransferQueryBulkResponse.  # noqa: E501

        照会対象取得区分<br>半角数字<br>リクエストしたときと同じ内容<br>1：ALL、2：振込申請のみ、3：振込受付情報のみ<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :return: The request_transfer_class of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_transfer_class

    @request_transfer_class.setter
    def request_transfer_class(self, request_transfer_class):
        """Sets the request_transfer_class of this TransferQueryBulkResponse.

        照会対象取得区分<br>半角数字<br>リクエストしたときと同じ内容<br>1：ALL、2：振込申請のみ、3：振込受付情報のみ<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :param request_transfer_class: The request_transfer_class of this TransferQueryBulkResponse.  # noqa: E501
        :type: str
        """

        self._request_transfer_class = request_transfer_class

    @property
    def request_transfer_term(self):
        """Gets the request_transfer_term of this TransferQueryBulkResponse.  # noqa: E501

        振込照会対象期間区分<br>半角数字<br>リクエストしたときと同じ内容<br>1：振込申請受付日　2：振込指定日<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :return: The request_transfer_term of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._request_transfer_term

    @request_transfer_term.setter
    def request_transfer_term(self, request_transfer_term):
        """Sets the request_transfer_term of this TransferQueryBulkResponse.

        振込照会対象期間区分<br>半角数字<br>リクエストしたときと同じ内容<br>1：振込申請受付日　2：振込指定日<br>該当する情報が無い場合は項目自体を設定しません<br>  # noqa: E501

        :param request_transfer_term: The request_transfer_term of this TransferQueryBulkResponse.  # noqa: E501
        :type: str
        """

        self._request_transfer_term = request_transfer_term

    @property
    def has_next(self):
        """Gets the has_next of this TransferQueryBulkResponse.  # noqa: E501

        次明細フラグ<br>・true=次明細あり<br>・false=次明細なし<br>  # noqa: E501

        :return: The has_next of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this TransferQueryBulkResponse.

        次明細フラグ<br>・true=次明細あり<br>・false=次明細なし<br>  # noqa: E501

        :param has_next: The has_next of this TransferQueryBulkResponse.  # noqa: E501
        :type: bool
        """

        self._has_next = has_next

    @property
    def next_item_key(self):
        """Gets the next_item_key of this TransferQueryBulkResponse.  # noqa: E501

        次明細キー<br>半角数字<br>次明細フラグがfalseの場合は項目自体を設定しません<br>  # noqa: E501

        :return: The next_item_key of this TransferQueryBulkResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_item_key

    @next_item_key.setter
    def next_item_key(self, next_item_key):
        """Sets the next_item_key of this TransferQueryBulkResponse.

        次明細キー<br>半角数字<br>次明細フラグがfalseの場合は項目自体を設定しません<br>  # noqa: E501

        :param next_item_key: The next_item_key of this TransferQueryBulkResponse.  # noqa: E501
        :type: str
        """

        self._next_item_key = next_item_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferQueryBulkResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferQueryBulkResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
