# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/api-cooperation/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.15.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Balance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_type_code': 'str',
        'account_type_name': 'str',
        'balance': 'str',
        'base_date': 'str',
        'base_time': 'str',
        'withdrawable_amount': 'str',
        'previous_day_balance': 'str',
        'previous_month_balance': 'str',
        'currency_code': 'str',
        'currency_name': 'str',
        'fcy_total_balance': 'str',
        'ttb': 'str',
        'base_rate_date': 'str',
        'base_rate_time': 'str',
        'yen_equivalent': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_type_code': 'accountTypeCode',
        'account_type_name': 'accountTypeName',
        'balance': 'balance',
        'base_date': 'baseDate',
        'base_time': 'baseTime',
        'withdrawable_amount': 'withdrawableAmount',
        'previous_day_balance': 'previousDayBalance',
        'previous_month_balance': 'previousMonthBalance',
        'currency_code': 'currencyCode',
        'currency_name': 'currencyName',
        'fcy_total_balance': 'fcyTotalBalance',
        'ttb': 'ttb',
        'base_rate_date': 'baseRateDate',
        'base_rate_time': 'baseRateTime',
        'yen_equivalent': 'yenEquivalent'
    }

    def __init__(self, account_id=None, account_type_code=None, account_type_name=None, balance=None, base_date=None, base_time=None, withdrawable_amount=None, previous_day_balance=None, previous_month_balance=None, currency_code=None, currency_name=None, fcy_total_balance=None, ttb=None, base_rate_date=None, base_rate_time=None, yen_equivalent=None):  # noqa: E501
        """Balance - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_type_code = None
        self._account_type_name = None
        self._balance = None
        self._base_date = None
        self._base_time = None
        self._withdrawable_amount = None
        self._previous_day_balance = None
        self._previous_month_balance = None
        self._currency_code = None
        self._currency_name = None
        self._fcy_total_balance = None
        self._ttb = None
        self._base_rate_date = None
        self._base_rate_time = None
        self._yen_equivalent = None
        self.discriminator = None
        self.account_id = account_id
        self.account_type_code = account_type_code
        self.account_type_name = account_type_name
        if balance is not None:
            self.balance = balance
        self.base_date = base_date
        self.base_time = base_time
        if withdrawable_amount is not None:
            self.withdrawable_amount = withdrawable_amount
        if previous_day_balance is not None:
            self.previous_day_balance = previous_day_balance
        if previous_month_balance is not None:
            self.previous_month_balance = previous_month_balance
        self.currency_code = currency_code
        self.currency_name = currency_name
        if fcy_total_balance is not None:
            self.fcy_total_balance = fcy_total_balance
        if ttb is not None:
            self.ttb = ttb
        if base_rate_date is not None:
            self.base_rate_date = base_rate_date
        if base_rate_time is not None:
            self.base_rate_time = base_rate_time
        if yen_equivalent is not None:
            self.yen_equivalent = yen_equivalent

    @property
    def account_id(self):
        """Gets the account_id of this Balance.  # noqa: E501

        口座ID<br>半角英数字<br>口座を識別するID<br>  # noqa: E501

        :return: The account_id of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Balance.

        口座ID<br>半角英数字<br>口座を識別するID<br>  # noqa: E501

        :param account_id: The account_id of this Balance.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def account_type_code(self):
        """Gets the account_type_code of this Balance.  # noqa: E501

        科目コード<br>半角数字<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>・11=円定期預金<br>・51=外貨普通預金<br>・81=証券コネクト口座<br>  # noqa: E501

        :return: The account_type_code of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._account_type_code

    @account_type_code.setter
    def account_type_code(self, account_type_code):
        """Sets the account_type_code of this Balance.

        科目コード<br>半角数字<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>・11=円定期預金<br>・51=外貨普通預金<br>・81=証券コネクト口座<br>  # noqa: E501

        :param account_type_code: The account_type_code of this Balance.  # noqa: E501
        :type: str
        """
        if account_type_code is None:
            raise ValueError("Invalid value for `account_type_code`, must not be `None`")  # noqa: E501

        self._account_type_code = account_type_code

    @property
    def account_type_name(self):
        """Gets the account_type_name of this Balance.  # noqa: E501

        科目名<br>全角文字<br>科目コードの名称<br>  # noqa: E501

        :return: The account_type_name of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._account_type_name

    @account_type_name.setter
    def account_type_name(self, account_type_name):
        """Sets the account_type_name of this Balance.

        科目名<br>全角文字<br>科目コードの名称<br>  # noqa: E501

        :param account_type_name: The account_type_name of this Balance.  # noqa: E501
        :type: str
        """
        if account_type_name is None:
            raise ValueError("Invalid value for `account_type_name`, must not be `None`")  # noqa: E501

        self._account_type_name = account_type_name

    @property
    def balance(self):
        """Gets the balance of this Balance.  # noqa: E501

        現在残高<br>半角数字　マイナス含む<br>基準日時における現在残高<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>・11=円定期預金<br>・81=証券コネクト口座<br>  # noqa: E501

        :return: The balance of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Balance.

        現在残高<br>半角数字　マイナス含む<br>基準日時における現在残高<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>・11=円定期預金<br>・81=証券コネクト口座<br>  # noqa: E501

        :param balance: The balance of this Balance.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def base_date(self):
        """Gets the base_date of this Balance.  # noqa: E501

        基準日<br>半角文字<br>残高および引出可能額を照会した基準日を示します<br>YYYY-MM-DD形式<br>  # noqa: E501

        :return: The base_date of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._base_date

    @base_date.setter
    def base_date(self, base_date):
        """Sets the base_date of this Balance.

        基準日<br>半角文字<br>残高および引出可能額を照会した基準日を示します<br>YYYY-MM-DD形式<br>  # noqa: E501

        :param base_date: The base_date of this Balance.  # noqa: E501
        :type: str
        """
        if base_date is None:
            raise ValueError("Invalid value for `base_date`, must not be `None`")  # noqa: E501

        self._base_date = base_date

    @property
    def base_time(self):
        """Gets the base_time of this Balance.  # noqa: E501

        基準時刻<br>半角文字<br>残高および引出可能額を照会した基準時刻を示します<br>HH:MM:SS+09:00形式<br>  # noqa: E501

        :return: The base_time of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._base_time

    @base_time.setter
    def base_time(self, base_time):
        """Sets the base_time of this Balance.

        基準時刻<br>半角文字<br>残高および引出可能額を照会した基準時刻を示します<br>HH:MM:SS+09:00形式<br>  # noqa: E501

        :param base_time: The base_time of this Balance.  # noqa: E501
        :type: str
        """
        if base_time is None:
            raise ValueError("Invalid value for `base_time`, must not be `None`")  # noqa: E501

        self._base_time = base_time

    @property
    def withdrawable_amount(self):
        """Gets the withdrawable_amount of this Balance.  # noqa: E501

        支払可能残高<br>半角数字　マイナス含む<br>応答時点での引出可能額を示します<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>  # noqa: E501

        :return: The withdrawable_amount of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._withdrawable_amount

    @withdrawable_amount.setter
    def withdrawable_amount(self, withdrawable_amount):
        """Sets the withdrawable_amount of this Balance.

        支払可能残高<br>半角数字　マイナス含む<br>応答時点での引出可能額を示します<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>  # noqa: E501

        :param withdrawable_amount: The withdrawable_amount of this Balance.  # noqa: E501
        :type: str
        """

        self._withdrawable_amount = withdrawable_amount

    @property
    def previous_day_balance(self):
        """Gets the previous_day_balance of this Balance.  # noqa: E501

        前日残高<br>半角数字　マイナス含む<br>日付が変わった直後は、銀行の締め処理が終わるまでは前々日の残高となります<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>  # noqa: E501

        :return: The previous_day_balance of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._previous_day_balance

    @previous_day_balance.setter
    def previous_day_balance(self, previous_day_balance):
        """Sets the previous_day_balance of this Balance.

        前日残高<br>半角数字　マイナス含む<br>日付が変わった直後は、銀行の締め処理が終わるまでは前々日の残高となります<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>  # noqa: E501

        :param previous_day_balance: The previous_day_balance of this Balance.  # noqa: E501
        :type: str
        """

        self._previous_day_balance = previous_day_balance

    @property
    def previous_month_balance(self):
        """Gets the previous_month_balance of this Balance.  # noqa: E501

        前月末残高<br>半角数字　マイナス含む<br>月が変わった直後は、銀行の締め処理が終わるまでは前々月の残高となります<br> 科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>  # noqa: E501

        :return: The previous_month_balance of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._previous_month_balance

    @previous_month_balance.setter
    def previous_month_balance(self, previous_month_balance):
        """Sets the previous_month_balance of this Balance.

        前月末残高<br>半角数字　マイナス含む<br>月が変わった直後は、銀行の締め処理が終わるまでは前々月の残高となります<br> 科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・01=普通預金（有利息）<br>・02=普通預金（決済用）<br>  # noqa: E501

        :param previous_month_balance: The previous_month_balance of this Balance.  # noqa: E501
        :type: str
        """

        self._previous_month_balance = previous_month_balance

    @property
    def currency_code(self):
        """Gets the currency_code of this Balance.  # noqa: E501

        通貨コード<br>半角文字<br>ISO4217に準拠した通貨コード<br>  # noqa: E501

        :return: The currency_code of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Balance.

        通貨コード<br>半角文字<br>ISO4217に準拠した通貨コード<br>  # noqa: E501

        :param currency_code: The currency_code of this Balance.  # noqa: E501
        :type: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")  # noqa: E501

        self._currency_code = currency_code

    @property
    def currency_name(self):
        """Gets the currency_name of this Balance.  # noqa: E501

        通貨名<br>全角文字<br>ISO4217に準拠した通貨コードの当行での名称<br>  # noqa: E501

        :return: The currency_name of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._currency_name

    @currency_name.setter
    def currency_name(self, currency_name):
        """Sets the currency_name of this Balance.

        通貨名<br>全角文字<br>ISO4217に準拠した通貨コードの当行での名称<br>  # noqa: E501

        :param currency_name: The currency_name of this Balance.  # noqa: E501
        :type: str
        """
        if currency_name is None:
            raise ValueError("Invalid value for `currency_name`, must not be `None`")  # noqa: E501

        self._currency_name = currency_name

    @property
    def fcy_total_balance(self):
        """Gets the fcy_total_balance of this Balance.  # noqa: E501

        外貨残高<br>半角数字　少数点および小数部最大3桁　マイナス含む<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :return: The fcy_total_balance of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._fcy_total_balance

    @fcy_total_balance.setter
    def fcy_total_balance(self, fcy_total_balance):
        """Sets the fcy_total_balance of this Balance.

        外貨残高<br>半角数字　少数点および小数部最大3桁　マイナス含む<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :param fcy_total_balance: The fcy_total_balance of this Balance.  # noqa: E501
        :type: str
        """

        self._fcy_total_balance = fcy_total_balance

    @property
    def ttb(self):
        """Gets the ttb of this Balance.  # noqa: E501

        外貨レート<br>半角数字　少数点および小数部最大3桁　マイナス含む<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :return: The ttb of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._ttb

    @ttb.setter
    def ttb(self, ttb):
        """Sets the ttb of this Balance.

        外貨レート<br>半角数字　少数点および小数部最大3桁　マイナス含む<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :param ttb: The ttb of this Balance.  # noqa: E501
        :type: str
        """

        self._ttb = ttb

    @property
    def base_rate_date(self):
        """Gets the base_rate_date of this Balance.  # noqa: E501

        外貨レート基準日<br>半角文字<br>外貨レートの基準日を示します<br>YYYY-MM-DD形式<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :return: The base_rate_date of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_date

    @base_rate_date.setter
    def base_rate_date(self, base_rate_date):
        """Sets the base_rate_date of this Balance.

        外貨レート基準日<br>半角文字<br>外貨レートの基準日を示します<br>YYYY-MM-DD形式<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :param base_rate_date: The base_rate_date of this Balance.  # noqa: E501
        :type: str
        """

        self._base_rate_date = base_rate_date

    @property
    def base_rate_time(self):
        """Gets the base_rate_time of this Balance.  # noqa: E501

        外貨レート基準時刻<br>半角文字<br>外貨レートの基準時刻を示します<br>HH:MM:SS+09:00形式<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :return: The base_rate_time of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._base_rate_time

    @base_rate_time.setter
    def base_rate_time(self, base_rate_time):
        """Sets the base_rate_time of this Balance.

        外貨レート基準時刻<br>半角文字<br>外貨レートの基準時刻を示します<br>HH:MM:SS+09:00形式<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :param base_rate_time: The base_rate_time of this Balance.  # noqa: E501
        :type: str
        """

        self._base_rate_time = base_rate_time

    @property
    def yen_equivalent(self):
        """Gets the yen_equivalent of this Balance.  # noqa: E501

        外貨円換算額<br>半角数字　マイナス含む<br>外貨残高を円に換算した額<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :return: The yen_equivalent of this Balance.  # noqa: E501
        :rtype: str
        """
        return self._yen_equivalent

    @yen_equivalent.setter
    def yen_equivalent(self, yen_equivalent):
        """Sets the yen_equivalent of this Balance.

        外貨円換算額<br>半角数字　マイナス含む<br>外貨残高を円に換算した額<br>科目コードが以下の場合のみ設定されます<br>該当しない場合は項目自体を設定しません<br>・51=外貨普通預金<br>  # noqa: E501

        :param yen_equivalent: The yen_equivalent of this Balance.  # noqa: E501
        :type: str
        """

        self._yen_equivalent = yen_equivalent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Balance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Balance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
