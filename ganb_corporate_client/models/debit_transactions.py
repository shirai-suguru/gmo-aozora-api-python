# coding: utf-8

"""
    GMO Aozora Net Bank Open API

    <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/api-cooperation/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>   # noqa: E501

    OpenAPI spec version: 1.15.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DebitTransactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_date': 'str',
        'use_content': 'str',
        'amount': 'str',
        'local_currency_amount': 'str',
        'conversion_rate': 'str',
        'approval_number': 'str',
        'debit_transaction_status': 'str',
        'currency_code': 'str',
        'atm_commission': 'str'
    }

    attribute_map = {
        'use_date': 'useDate',
        'use_content': 'useContent',
        'amount': 'amount',
        'local_currency_amount': 'localCurrencyAmount',
        'conversion_rate': 'conversionRate',
        'approval_number': 'approvalNumber',
        'debit_transaction_status': 'debitTransactionStatus',
        'currency_code': 'currencyCode',
        'atm_commission': 'atmCommission'
    }

    def __init__(self, use_date=None, use_content=None, amount=None, local_currency_amount=None, conversion_rate=None, approval_number=None, debit_transaction_status=None, currency_code=None, atm_commission=None):  # noqa: E501
        """DebitTransactions - a model defined in Swagger"""  # noqa: E501
        self._use_date = None
        self._use_content = None
        self._amount = None
        self._local_currency_amount = None
        self._conversion_rate = None
        self._approval_number = None
        self._debit_transaction_status = None
        self._currency_code = None
        self._atm_commission = None
        self.discriminator = None
        if use_date is not None:
            self.use_date = use_date
        if use_content is not None:
            self.use_content = use_content
        if amount is not None:
            self.amount = amount
        if local_currency_amount is not None:
            self.local_currency_amount = local_currency_amount
        if conversion_rate is not None:
            self.conversion_rate = conversion_rate
        if approval_number is not None:
            self.approval_number = approval_number
        if debit_transaction_status is not None:
            self.debit_transaction_status = debit_transaction_status
        if currency_code is not None:
            self.currency_code = currency_code
        if atm_commission is not None:
            self.atm_commission = atm_commission

    @property
    def use_date(self):
        """Gets the use_date of this DebitTransactions.  # noqa: E501

        半角文字<br>YYYY-MM-DD形式<br>  # noqa: E501

        :return: The use_date of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._use_date

    @use_date.setter
    def use_date(self, use_date):
        """Sets the use_date of this DebitTransactions.

        半角文字<br>YYYY-MM-DD形式<br>  # noqa: E501

        :param use_date: The use_date of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._use_date = use_date

    @property
    def use_content(self):
        """Gets the use_content of this DebitTransactions.  # noqa: E501

        全半角文字<br>  # noqa: E501

        :return: The use_content of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._use_content

    @use_content.setter
    def use_content(self, use_content):
        """Sets the use_content of this DebitTransactions.

        全半角文字<br>  # noqa: E501

        :param use_content: The use_content of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._use_content = use_content

    @property
    def amount(self):
        """Gets the amount of this DebitTransactions.  # noqa: E501

        半角数字<br>マイナス含む　円貨金額<br>  # noqa: E501

        :return: The amount of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DebitTransactions.

        半角数字<br>マイナス含む　円貨金額<br>  # noqa: E501

        :param amount: The amount of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def local_currency_amount(self):
        """Gets the local_currency_amount of this DebitTransactions.  # noqa: E501

        半角数字<br>小数部最大6桁、マイナス含む<br>国内利用の場合は項目自体を設定しません<br>  # noqa: E501

        :return: The local_currency_amount of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._local_currency_amount

    @local_currency_amount.setter
    def local_currency_amount(self, local_currency_amount):
        """Sets the local_currency_amount of this DebitTransactions.

        半角数字<br>小数部最大6桁、マイナス含む<br>国内利用の場合は項目自体を設定しません<br>  # noqa: E501

        :param local_currency_amount: The local_currency_amount of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._local_currency_amount = local_currency_amount

    @property
    def conversion_rate(self):
        """Gets the conversion_rate of this DebitTransactions.  # noqa: E501

        半角数字<br>小数部最大6桁、マイナス含む<br>国内利用の場合は項目自体を設定しません<br>  # noqa: E501

        :return: The conversion_rate of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._conversion_rate

    @conversion_rate.setter
    def conversion_rate(self, conversion_rate):
        """Sets the conversion_rate of this DebitTransactions.

        半角数字<br>小数部最大6桁、マイナス含む<br>国内利用の場合は項目自体を設定しません<br>  # noqa: E501

        :param conversion_rate: The conversion_rate of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._conversion_rate = conversion_rate

    @property
    def approval_number(self):
        """Gets the approval_number of this DebitTransactions.  # noqa: E501

        半角数字<br>  # noqa: E501

        :return: The approval_number of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._approval_number

    @approval_number.setter
    def approval_number(self, approval_number):
        """Sets the approval_number of this DebitTransactions.

        半角数字<br>  # noqa: E501

        :param approval_number: The approval_number of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._approval_number = approval_number

    @property
    def debit_transaction_status(self):
        """Gets the debit_transaction_status of this DebitTransactions.  # noqa: E501

        半角数字<br>1：確定・・・・・・決済として完了している状態<br>2：未確定・・・・加盟店からの情報によりお客様の口座から資金を引き落として<br>                   いますが、決済としては完了していない状態<br>3：取消済・・・・取消を行った状態<br>  # noqa: E501

        :return: The debit_transaction_status of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._debit_transaction_status

    @debit_transaction_status.setter
    def debit_transaction_status(self, debit_transaction_status):
        """Sets the debit_transaction_status of this DebitTransactions.

        半角数字<br>1：確定・・・・・・決済として完了している状態<br>2：未確定・・・・加盟店からの情報によりお客様の口座から資金を引き落として<br>                   いますが、決済としては完了していない状態<br>3：取消済・・・・取消を行った状態<br>  # noqa: E501

        :param debit_transaction_status: The debit_transaction_status of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._debit_transaction_status = debit_transaction_status

    @property
    def currency_code(self):
        """Gets the currency_code of this DebitTransactions.  # noqa: E501

        半角文字<br>ISO4217準拠した通貨コード<br>国内利用の場合は項目自体を設定しません<br>  # noqa: E501

        :return: The currency_code of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this DebitTransactions.

        半角文字<br>ISO4217準拠した通貨コード<br>国内利用の場合は項目自体を設定しません<br>  # noqa: E501

        :param currency_code: The currency_code of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def atm_commission(self):
        """Gets the atm_commission of this DebitTransactions.  # noqa: E501

        半角数字<br>少数点および小数部最大6桁、マイナス含む　<br>現地通貨金額でのATM手数料<br>国内利用の場合または、ATM手数料が発生していない場合は項目自体を設定しません<br>  # noqa: E501

        :return: The atm_commission of this DebitTransactions.  # noqa: E501
        :rtype: str
        """
        return self._atm_commission

    @atm_commission.setter
    def atm_commission(self, atm_commission):
        """Sets the atm_commission of this DebitTransactions.

        半角数字<br>少数点および小数部最大6桁、マイナス含む　<br>現地通貨金額でのATM手数料<br>国内利用の場合または、ATM手数料が発生していない場合は項目自体を設定しません<br>  # noqa: E501

        :param atm_commission: The atm_commission of this DebitTransactions.  # noqa: E501
        :type: str
        """

        self._atm_commission = atm_commission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebitTransactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebitTransactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
